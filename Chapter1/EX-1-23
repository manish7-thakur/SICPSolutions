(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
(define (next n)
    (if(= n 2) 3 (+ n 2)))
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))
(define (divides? a b)
  (= (remainder b a) 0))


(define (search-for-primes l u count)
    (define (timed-prime-test n)
      (if(= (remainder n 2) 0)(start-prime-test (+ n 1) (runtime)) (start-prime-test n (runtime))))
    (define (start-prime-test n start-time)
      (if (prime? n)
          (report-prime (- (runtime) start-time) n) #f))
    (define (report-prime elapsed-time n)
       (newline)(display n)
      (display " *** ")
      (display elapsed-time))
        (if (or (= count 0) (>= l u))  "Done"
        (if(timed-prime-test l) (search-for-primes (+ l 2) u (- count 1)) (search-for-primes (+ l 2) u count))))