(define (search-for-primes l u count)
    (define (timed-prime-test n)
      (if(= (remainder n 2) 0)(start-prime-test (+ n 1) (runtime)) (start-prime-test n (runtime))))
    (define (start-prime-test n start-time)
      (if (fast-prime? n 500)
          (report-prime (- (runtime) start-time) n) #f))
    (define (report-prime elapsed-time n)
       (newline)(display n)
      (display " *** ")
      (display elapsed-time))
        (if (or (= count 0) (>= l u))  "Done"
        (if(timed-prime-test l) (search-for-primes (+ l 2) u (- count 1)) (search-for-primes (+ l 2) u count))))


(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))


$   (search-for-primes 1000000 10000000000 8)